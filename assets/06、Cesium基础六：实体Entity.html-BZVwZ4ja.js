import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DVIbrNyI.js";const p="/assets/image-20230711161548538-CLzeSj42.png",e="/assets/image-20230711161613553-DTKUHLXE.png",o={},c=t(`<h1 id="_06、实体entity" tabindex="-1"><a class="header-anchor" href="#_06、实体entity"><span>06、实体Entity</span></a></h1><p><strong>Entity API</strong> 公开一组设计一致的高级对象，这些对象将相关的可视化效果和信息聚合到统一的数据结构中，称之为<strong>实体</strong>。</p><ul><li>专注于数据的呈现，而不是担心可视化的潜在机制。</li><li>提供了结构，以便以自然适合静态数据的方式轻松构建复杂的时间动态可视化。</li></ul><p>虽然实体 API 实际上在后台使用原始 API，但这是（几乎）永远不必关注的实现细节。通过将各种启发式方法应用于我们提供的数据，实体 API 能够提供灵活、高性能的可视化效果，同时公开一致、易于学习且易于使用的界面。</p><ol><li><p>添加矩形并赋予颜色</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>  <span class="token comment">//添加矩形Entity并赋予颜色</span>
  <span class="token keyword">const</span> rectangle_red <span class="token operator">=</span> viewer<span class="token punctuation">.</span>entities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    polygon<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//层次结构：获取或设置指定多边形层次结构的属性。</span>
      hierarchy<span class="token operator">:</span> Cesium<span class="token punctuation">.</span>Cartesian3<span class="token punctuation">.</span><span class="token function">fromDegreesArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      material<span class="token operator">:</span> Cesium<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>添加矩形实体并每个顶点赋予高程</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">//添加矩形实体并每个点赋予高程</span>
  <span class="token keyword">const</span> rectangle_red_height <span class="token operator">=</span> viewer<span class="token punctuation">.</span>entities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    polygon<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//层次结构：获取或设置指定多边形层次结构的属性。</span>
      hierarchy<span class="token operator">:</span> Cesium<span class="token punctuation">.</span>Cartesian3<span class="token punctuation">.</span><span class="token function">fromDegreesArrayHeights</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">500000</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      extrudedHeight<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//拉伸高度</span>
      perPositionHeight<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//获取或设置指定是否使用每个位置的高度的布尔值。 如果为 true，则形状将具有由每个hierarchy位置的高度定义的非均匀高度。如果为 false，则形状将具有由height 指定的恒定高度。</span>
      material<span class="token operator">:</span> Cesium<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token constant">ORANGE</span><span class="token punctuation">.</span><span class="token function">withAlpha</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//指定用于填充多边形的材料的属性,材质</span>
      outline<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//一个布尔属性，指定是否勾勒出多边形的轮廓。</span>
      outlineColor<span class="token operator">:</span> Cesium<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">,</span> <span class="token comment">//多边形轮廓颜色</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>添加走廊</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>  <span class="token comment">//添加走廊</span>
  <span class="token keyword">const</span> greenCorridor <span class="token operator">=</span> viewer<span class="token punctuation">.</span>entities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;绿色浮空走廊&quot;</span><span class="token punctuation">,</span>
    corridor<span class="token operator">:</span> <span class="token punctuation">{</span>
      positions<span class="token operator">:</span> Cesium<span class="token punctuation">.</span>Cartesian3<span class="token punctuation">.</span><span class="token function">fromDegreesArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token operator">-</span><span class="token number">90.0</span><span class="token punctuation">,</span> <span class="token number">40.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">95.0</span><span class="token punctuation">,</span> <span class="token number">40.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">95.0</span><span class="token punctuation">,</span> <span class="token number">35.0</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      height<span class="token operator">:</span> <span class="token number">100000.0</span><span class="token punctuation">,</span> <span class="token comment">//指定道路相对于椭球体表面的高度。</span>
      width<span class="token operator">:</span> <span class="token number">200000.0</span><span class="token punctuation">,</span> <span class="token comment">//指定道路边缘之间的距离。</span>
      cornerType<span class="token operator">:</span> Cesium<span class="token punctuation">.</span>CornerType<span class="token punctuation">.</span><span class="token constant">MITERED</span><span class="token punctuation">,</span> <span class="token comment">//指定拐角样式的角类型属性。</span>
      material<span class="token operator">:</span> Cesium<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">,</span>
      outline<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 指定是否勾勒出走廊的轮廓。</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol>',5),i=[c];function l(u,r){return s(),a("div",null,i)}const d=n(o,[["render",l],["__file","06、Cesium基础六：实体Entity.html.vue"]]),v=JSON.parse('{"path":"/studyNotes/Cesium%E7%AC%94%E8%AE%B0/06%E3%80%81Cesium%E5%9F%BA%E7%A1%80%E5%85%AD%EF%BC%9A%E5%AE%9E%E4%BD%93Entity.html","title":"06、实体Entity","lang":"zh-CN","frontmatter":{"description":"06、实体Entity Entity API 公开一组设计一致的高级对象，这些对象将相关的可视化效果和信息聚合到统一的数据结构中，称之为实体。 专注于数据的呈现，而不是担心可视化的潜在机制。 提供了结构，以便以自然适合静态数据的方式轻松构建复杂的时间动态可视化。 虽然实体 API 实际上在后台使用原始 API，但这是（几乎）永远不必关注的实现细节。通过...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/studyNotes/Cesium%E7%AC%94%E8%AE%B0/06%E3%80%81Cesium%E5%9F%BA%E7%A1%80%E5%85%AD%EF%BC%9A%E5%AE%9E%E4%BD%93Entity.html"}],["meta",{"property":"og:site_name","content":"歪脖祭司"}],["meta",{"property":"og:title","content":"06、实体Entity"}],["meta",{"property":"og:description","content":"06、实体Entity Entity API 公开一组设计一致的高级对象，这些对象将相关的可视化效果和信息聚合到统一的数据结构中，称之为实体。 专注于数据的呈现，而不是担心可视化的潜在机制。 提供了结构，以便以自然适合静态数据的方式轻松构建复杂的时间动态可视化。 虽然实体 API 实际上在后台使用原始 API，但这是（几乎）永远不必关注的实现细节。通过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T11:02:41.000Z"}],["meta",{"property":"article:author","content":"祭司唐"}],["meta",{"property":"article:modified_time","content":"2024-03-23T11:02:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06、实体Entity\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-23T11:02:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"祭司唐\\",\\"url\\":\\"\\"}]}"]]},"headers":[],"git":{"createdTime":1711191761000,"updatedTime":1711191761000,"contributors":[{"name":"tangwenjian","email":"gistwj@163.com","commits":1}]},"readingTime":{"minutes":1.85,"words":554},"filePathRelative":"studyNotes/Cesium笔记/06、Cesium基础六：实体Entity.md","localizedDate":"2024年3月23日","excerpt":"\\n<p><strong>Entity API</strong> 公开一组设计一致的高级对象，这些对象将相关的可视化效果和信息聚合到统一的数据结构中，称之为<strong>实体</strong>。</p>\\n<ul>\\n<li>专注于数据的呈现，而不是担心可视化的潜在机制。</li>\\n<li>提供了结构，以便以自然适合静态数据的方式轻松构建复杂的时间动态可视化。</li>\\n</ul>\\n<p>虽然实体 API 实际上在后台使用原始 API，但这是（几乎）永远不必关注的实现细节。通过将各种启发式方法应用于我们提供的数据，实体 API 能够提供灵活、高性能的可视化效果，同时公开一致、易于学习且易于使用的界面。</p>","autoDesc":true}');export{d as comp,v as data};
