import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,d as t,b as e,e as s}from"./app-DVIbrNyI.js";const l="/assets/image-20230717101440525-DBHjeTBL.png",u="/assets/image-20230717101535831-DtHoVIqC.png",r="/assets/image-20230717101728415-Be0FhO3c.png",d="/assets/image-20230717202354595-CC5xXN8w.png",k="/assets/image-20230717202642537-eToYxKv-.png",m="/assets/image-20230717202814203-CFqp_iU-.png",v="/assets/image-20230718093934218-DGaNXaAK.png",g="/assets/image-20230718102509248-LmtWbd-X.png",b="/assets/image-20230718093944151-CiQPgAOh.png",y="/assets/image-20230718093839974-BRZYo5vD.png",f="/assets/image-20230718110813429-BSWqN44V.png",h="/assets/image-20230718144435169-Domp5rMw.png",w="/assets/微信图片_20230717205915(1)-Ch-KbyiU.jpg",_="/assets/image-20230718164936833-CsCHT8P_.png",C="/assets/image-20230718155522084-C5csem9W.png",S="/assets/image-20230720183619566-CUAzhCzf.png",j="/assets/image-20230720183900757-CWvRQJRb.png",D="/assets/image-20230720184145376-Cc_9CAB1.png",x="/assets/image-20230720184712642-Bt824hiW.png",E={},P=s('<h1 id="_11、cesium源码" tabindex="-1"><a class="header-anchor" href="#_11、cesium源码"><span>11、Cesium源码</span></a></h1><h3 id="_1、viewer模块实例化过程" tabindex="-1"><a class="header-anchor" href="#_1、viewer模块实例化过程"><span>1、Viewer模块实例化过程</span></a></h3><h4 id="_1-1、获取源码" tabindex="-1"><a class="header-anchor" href="#_1-1、获取源码"><span>1.1、获取源码</span></a></h4><ul><li>github下载</li></ul>',4),V={href:"https://github.com/CesiumGS/cesium/releases",target:"_blank",rel:"noopener noreferrer"},A=s('<figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>编辑器打开</li></ul><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-2、viewer的构造函数" tabindex="-1"><a class="header-anchor" href="#_1-2、viewer的构造函数"><span>1.2、Viewer的构造函数</span></a></h4><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined_default</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//245548行；查看是否存在DOM</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DeveloperError_default</span><span class="token punctuation">(</span><span class="token string">&quot;container is required.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    container <span class="token operator">=</span> <span class="token function">getElement_default</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步，查看DOM元素是否存在，使用getElement_default模块判断domID或DOM元素变量并返回。</p><h5 id="_1-2-1、工具模块-defaultvalue-default" tabindex="-1"><a class="header-anchor" href="#_1-2-1、工具模块-defaultvalue-default"><span>1.2.1、工具模块：defaultValue_default</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//245552行</span>
options <span class="token operator">=</span> <span class="token function">defaultValue_default</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> defaultValue_default<span class="token punctuation">.</span><span class="token constant">EMPTY_OBJECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步是判断传进来的options对象是否为空，如果为空，那就使用空对象预设值<code>defaultValue_default.EMPTY_OBJECT</code>。其中，<code>defaultValue_default</code>是一个重要的模块，它判断第一个参数如果是<strong>undefined</strong>，就把第二个参数作为它的值返回，如果不是<strong>undefined</strong>，那就返回它本身。</p><h5 id="_1-2-2、工具模块-defined-default" tabindex="-1"><a class="header-anchor" href="#_1-2-2、工具模块-defined-default"><span>1.2.2、工具模块：defined_default</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//245553行</span>
<span class="token keyword">const</span> createBaseLayerPicker <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined_default</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>globe<span class="token punctuation">)</span> <span class="token operator">||</span> options<span class="token punctuation">.</span>globe <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined_default</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>baseLayerPicker<span class="token punctuation">)</span> <span class="token operator">||</span> options<span class="token punctuation">.</span>baseLayerPicker <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步通过<code>defined_default</code>模块判断构造参数<strong>options</strong>是否有<strong>globe</strong>属性、<strong>baseLayerPicker</strong>属性来决定是否创建底图选择器控件。<code>defined_default</code>模块的作用就是，判断传入值是否定义，定义了就返回<strong>true</strong>。</p><h5 id="_1-2-3、创建dom和判断传入参数option" tabindex="-1"><a class="header-anchor" href="#_1-2-3、创建dom和判断传入参数option"><span>1.2.3、创建DOM和判断传入参数option</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//245564行</span>
<span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> viewerContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
viewerContainer<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;cesium-viewer&quot;</span><span class="token punctuation">;</span>
container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>viewerContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cesiumWidgetContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cesiumWidgetContainer<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;cesium-viewer-cesiumWidgetContainer&quot;</span><span class="token punctuation">;</span>
viewerContainer<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>cesiumWidgetContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bottomContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bottomContainer<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;cesium-viewer-bottom&quot;</span><span class="token punctuation">;</span>
viewerContainer<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>bottomContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> scene3DOnly <span class="token operator">=</span> <span class="token function">defaultValue_default</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>scene3DOnly<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> clock<span class="token punctuation">;</span>
<span class="token keyword">let</span> clockViewModel<span class="token punctuation">;</span>
<span class="token keyword">let</span> destroyClockViewModel <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">defined_default</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>clockViewModel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	clockViewModel <span class="token operator">=</span> options<span class="token punctuation">.</span>clockViewModel<span class="token punctuation">;</span>
	clock <span class="token operator">=</span> clockViewModel<span class="token punctuation">.</span>clock<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
	clock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clock_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	clockViewModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClockViewModel_default</span><span class="token punctuation">(</span>clock<span class="token punctuation">)</span><span class="token punctuation">;</span>
	destroyClockViewModel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">defined_default</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>shouldAnimate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	clock<span class="token punctuation">.</span>shouldAnimate <span class="token operator">=</span> options<span class="token punctuation">.</span>shouldAnimate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<strong>Viewer</strong>实例的<strong>this</strong>指向变量赋予给<strong>that</strong>变量，并为控件的<strong>div</strong>创建<strong>DOM</strong>元素。</p><p>利用<code>defaultValue_default</code>模块和<code>defined_default</code>模块，实现：</p><ul><li>判断传入参数<strong>options</strong>中<strong>scene3DOnly</strong>参数是否赋值，如果没有则默认为<strong>false</strong>，即是否仅使用3d场景的意思；</li><li>判断传入参数<strong>options</strong>中的时钟模型属性<strong>clockViewModel</strong>是否存在，来决定是用传入的时钟模型，亦或者是用系统的时钟模型；</li><li>判断传入参数<strong>options</strong>中是否定义了<strong>shouldAnimate</strong>属性，如果定义了，则将时钟的同名属性设为同样的值。</li></ul><h5 id="_1-2-4、创建cesiumwidget" tabindex="-1"><a class="header-anchor" href="#_1-2-4、创建cesiumwidget"><span>1.2.4、创建CesiumWidget</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//225489行</span>
<span class="token keyword">const</span> cesiumWidget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CesiumWidget_default</span><span class="token punctuation">(</span>cesiumWidgetContainer<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">baseLayer</span><span class="token operator">:</span> createBaseLayerPicker <span class="token operator">||</span> <span class="token function">defined_default</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>baseLayer<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined_default</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>imageryProvider<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span>
      clock<span class="token punctuation">,</span>
      <span class="token literal-property property">skyBox</span><span class="token operator">:</span> options<span class="token punctuation">.</span>skyBox<span class="token punctuation">,</span>
      <span class="token literal-property property">skyAtmosphere</span><span class="token operator">:</span> options<span class="token punctuation">.</span>skyAtmosphere<span class="token punctuation">,</span>
      <span class="token literal-property property">sceneMode</span><span class="token operator">:</span> options<span class="token punctuation">.</span>sceneMode<span class="token punctuation">,</span>
      <span class="token literal-property property">mapProjection</span><span class="token operator">:</span> options<span class="token punctuation">.</span>mapProjection<span class="token punctuation">,</span>
      <span class="token literal-property property">globe</span><span class="token operator">:</span> options<span class="token punctuation">.</span>globe<span class="token punctuation">,</span>
      <span class="token literal-property property">orderIndependentTranslucency</span><span class="token operator">:</span> options<span class="token punctuation">.</span>orderIndependentTranslucency<span class="token punctuation">,</span>
      <span class="token literal-property property">contextOptions</span><span class="token operator">:</span> options<span class="token punctuation">.</span>contextOptions<span class="token punctuation">,</span>
      <span class="token literal-property property">useDefaultRenderLoop</span><span class="token operator">:</span> options<span class="token punctuation">.</span>useDefaultRenderLoop<span class="token punctuation">,</span>
      <span class="token literal-property property">targetFrameRate</span><span class="token operator">:</span> options<span class="token punctuation">.</span>targetFrameRate<span class="token punctuation">,</span>
      <span class="token literal-property property">showRenderLoopErrors</span><span class="token operator">:</span> options<span class="token punctuation">.</span>showRenderLoopErrors<span class="token punctuation">,</span>
      <span class="token literal-property property">useBrowserRecommendedResolution</span><span class="token operator">:</span> options<span class="token punctuation">.</span>useBrowserRecommendedResolution<span class="token punctuation">,</span>
      <span class="token literal-property property">creditContainer</span><span class="token operator">:</span> <span class="token function">defined_default</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>creditContainer<span class="token punctuation">)</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>creditContainer <span class="token operator">:</span> bottomContainer<span class="token punctuation">,</span>
      <span class="token literal-property property">creditViewport</span><span class="token operator">:</span> options<span class="token punctuation">.</span>creditViewport<span class="token punctuation">,</span>
      scene3DOnly<span class="token punctuation">,</span>
      <span class="token literal-property property">shadows</span><span class="token operator">:</span> options<span class="token punctuation">.</span>shadows<span class="token punctuation">,</span>
      <span class="token literal-property property">terrainShadows</span><span class="token operator">:</span> options<span class="token punctuation">.</span>terrainShadows<span class="token punctuation">,</span>
      <span class="token literal-property property">mapMode2D</span><span class="token operator">:</span> options<span class="token punctuation">.</span>mapMode2D<span class="token punctuation">,</span>
      <span class="token literal-property property">blurActiveElementOnCanvasFocus</span><span class="token operator">:</span> options<span class="token punctuation">.</span>blurActiveElementOnCanvasFocus<span class="token punctuation">,</span>
      <span class="token literal-property property">requestRenderMode</span><span class="token operator">:</span> options<span class="token punctuation">.</span>requestRenderMode<span class="token punctuation">,</span>
      <span class="token literal-property property">maximumRenderTimeChange</span><span class="token operator">:</span> options<span class="token punctuation">.</span>maximumRenderTimeChange<span class="token punctuation">,</span>
      <span class="token literal-property property">depthPlaneEllipsoidOffset</span><span class="token operator">:</span> options<span class="token punctuation">.</span>depthPlaneEllipsoidOffset<span class="token punctuation">,</span>
      <span class="token literal-property property">msaaSamples</span><span class="token operator">:</span> options<span class="token punctuation">.</span>msaaSamples
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>高频API、<strong>Scene</strong>、<strong>imageryProvider</strong>、<strong>Globe</strong>等均在<strong>CesiumWidget</strong>实例化这一步创建。</p><h5 id="_1-2-5、其他的初始化" tabindex="-1"><a class="header-anchor" href="#_1-2-5、其他的初始化"><span>1.2.5、其他的初始化</span></a></h5><p>紧随其后的就是队<strong>Viewer</strong>的其他的一些属性的初始化，分别是界面上的按钮、时间轴等控件的初始化、事件总管理者<code>EventHelper</code>模块的初始化、重要的<code>DataSourceCollection/DataSourceDisplay</code>的初始化。</p><p>最后，以上初始化的对象，全部注册为当前<strong>Viewer</strong>实例上的属性，并将其中一些对象例如：<strong>DataSourceCollection</strong>的一些事件一并注册到<strong>Viewer</strong>的原型上。</p><p>除了以上初始化之外，<strong>Cesium</strong>还默认为<strong>cesiumWidget</strong>注册了屏幕操作事件的点击、双击事件，方便初始化完成后能通过点击来拾取场景中的<strong>Entity</strong>（场景<strong>Scene</strong>、实体<strong>Entity</strong>是数据范围，不作详细介绍了），这两个事件使用<code>cesiumWidget.screenSpaceEventHandler.setInputAction</code>方法来注册。</p><h5 id="_1-2-6、原型定义方法-object-defineproperties" tabindex="-1"><a class="header-anchor" href="#_1-2-6、原型定义方法-object-defineproperties"><span>1.2.6、原型定义方法： Object.defineProperties</span></a></h5><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<strong>Viewer</strong>的原型上定义的许多属性，包括上文提及的初始化的多个对象、事件等。还包括上文创建的各个初始化的对象的一些<strong>属性快捷连接</strong>，以便<strong>Viewer</strong>实例上直接访问<strong>其他模块的属性</strong>。</p><p>例如你既能在<strong>Viewer</strong>上获取<strong>camera</strong>，也能在<strong>Scene</strong>模块获取<strong>camera</strong>，只不过<strong>Viewer</strong>上返回的<strong>camera</strong>也要先访问<strong>scene</strong>罢了。</p><p>还在Viewer的原型上定义了许多公共方法和私有方法。</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、cesiumwidget模块实例化过程" tabindex="-1"><a class="header-anchor" href="#_2、cesiumwidget模块实例化过程"><span>2、CesiumWidget模块实例化过程</span></a></h3><p>实例化<strong>Viewer</strong>必定会实例化一个<strong>CesiumWidget</strong>。<strong>CesiumWidget</strong>实际上代表的是<strong>三维数据可视区域</strong>，而<strong>Viewer</strong>除了包括可视区域，还包括各种控件（时间轴、右上角各种按钮、搜索框、时间拨盘等），更像是一个<strong>总体承载容器</strong>。<strong>Viewer</strong>能通过<code>extend</code>()方法扩充自定义的控件。</p>',34),R={href:"https://zhuanlan.zhihu.com/p/121935766",target:"_blank",rel:"noopener noreferrer"},z=s('<p>在<strong>cesium</strong>中，虽然<strong>CesiumWidget</strong>是三维数据可视区域，但是真正调用<strong>WebGL</strong>进行绘图的是<strong>CesiumWidget</strong>中实例化的<strong>Scene</strong>，<strong>CesiumWidget</strong>会将构造时传递的<strong>DOM</strong>元素中内部<strong>嵌入</strong>一个<strong>canvas</strong>，再将这个<strong>canvas元素</strong>传递给<strong>Scene实例</strong>，让<strong>Scene</strong>进行绘制。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-1、场景及有关对象构造" tabindex="-1"><a class="header-anchor" href="#_2-1、场景及有关对象构造"><span>2.1、场景及有关对象构造</span></a></h4><p><strong>CesiumWidget</strong>模块的构造函数通过一个<code>try/catch</code>块，完成<strong>Scene</strong>、<strong>Globe</strong>、<strong>SkyBox</strong>、<strong>SkyAtmosphere</strong>模块的实例化。而最终暴露到<strong>CesiumWidget</strong>的<strong>API</strong>中的，有<strong>camera、terrainProvider、imageryLayers、scene、screenSpaceEventHandler、clock</strong>这几个主要的对象</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但在<strong>Cesium</strong>中，某个模块的属性并不一定是其原型上的，而是<strong>这个模块别的属性的原型上的</strong>。例如：<strong>CesiumWidget</strong>的属性<strong>Camera</strong>是<strong>Scene</strong>上的。</p><p>所以想要知道<strong>API</strong>之间的<strong>包含关系</strong>，只能通过源码了解。</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// CesiumWidget.js模块</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token class-name">CesiumWidget</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token literal-property property">camera</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_scene<span class="token punctuation">.</span>camera<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-2、scene实例化" tabindex="-1"><a class="header-anchor" href="#_2-2、scene实例化"><span>2.2、Scene实例化</span></a></h4><p>实例化<strong>Scene</strong>对象，传递主要的构造参数大部分来自于<strong>CesiumWidget</strong>的构造参数<strong>options</strong>中。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//实例化Scene对象</span>
<span class="token keyword">var</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scene</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">canvas</span> <span class="token operator">:</span> canvas<span class="token punctuation">,</span>
    <span class="token literal-property property">contextOptions</span> <span class="token operator">:</span> options<span class="token punctuation">.</span>contextOptions<span class="token punctuation">,</span>
    <span class="token literal-property property">creditContainer</span> <span class="token operator">:</span> innerCreditContainer<span class="token punctuation">,</span>
    <span class="token literal-property property">creditViewport</span><span class="token operator">:</span> creditViewport<span class="token punctuation">,</span>
    <span class="token literal-property property">mapProjection</span> <span class="token operator">:</span> options<span class="token punctuation">.</span>mapProjection<span class="token punctuation">,</span>
    <span class="token comment">// 太长了不贴了</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_scene <span class="token operator">=</span> scene<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定摄像机的约束轴为Z轴，触发私有函数调整像素比例和摄像机视锥体。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>scene<span class="token punctuation">.</span>camera<span class="token punctuation">.</span>constrainedAxis <span class="token operator">=</span> Cartesian3_default<span class="token punctuation">.</span><span class="token constant">UNIT_Z</span><span class="token punctuation">;</span>
<span class="token function">configurePixelRatio</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">configureCameraFrustum</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建<strong>ellipsoid</strong>和<strong>globe</strong>，并传递给<strong>scene</strong>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>      <span class="token keyword">const</span> ellipsoid <span class="token operator">=</span> <span class="token function">defaultValue_default</span><span class="token punctuation">(</span>
        scene<span class="token punctuation">.</span>mapProjection<span class="token punctuation">.</span>ellipsoid<span class="token punctuation">,</span>
        Ellipsoid_default<span class="token punctuation">.</span><span class="token constant">WGS84</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> globe <span class="token operator">=</span> options<span class="token punctuation">.</span>globe<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined_default</span><span class="token punctuation">(</span>globe<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        globe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Globe_default</span><span class="token punctuation">(</span>ellipsoid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>globe <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scene<span class="token punctuation">.</span>globe <span class="token operator">=</span> globe<span class="token punctuation">;</span>
        scene<span class="token punctuation">.</span>globe<span class="token punctuation">.</span>shadows <span class="token operator">=</span> <span class="token function">defaultValue_default</span><span class="token punctuation">(</span>
          options<span class="token punctuation">.</span>terrainShadows<span class="token punctuation">,</span>
          ShadowMode_default<span class="token punctuation">.</span><span class="token constant">RECEIVE_ONLY</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后续主要创建：</p><ul><li>环境因素：主要是天空盒和太阳、月亮、大气环境。</li><li>影像数据源：（若无，则调用<strong>createWorldImagery</strong>模块创建世界影像，和<strong>CesiumION</strong>的<strong>token</strong>有关）和地形数据源，并传递给<strong>scene</strong>。影像数据源和地形数据源均可以从<strong>options</strong>中获取，若<strong>options</strong>没有，则使用<strong>Cesium</strong>官方给的，需要注意<strong>token</strong>问题。</li><li>视图模式：确定<strong>scene</strong>对象的视图模式是二维的、三维的还是哥伦布的（2.5D）。</li><li>给<strong>scene</strong>绑定了渲染错误事件处理函数。</li><li>确认是否使用默认的循环渲染机制（<strong>useDefaultRenderLoop</strong>属性），这个属性若为<strong>false</strong>，则需要手动调用<code>CesiumWidget.render()</code>渲染。还确定了在默认循环渲染机制时，目标帧速率（<strong>targetFrameRate</strong>属性）。</li></ul><h4 id="_2-3、原型上的方法定义" tabindex="-1"><a class="header-anchor" href="#_2-3、原型上的方法定义"><span>2.3、原型上的方法定义</span></a></h4><figure><img src="`+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3、requestanimationframe循环触发帧动画" tabindex="-1"><a class="header-anchor" href="#_3、requestanimationframe循环触发帧动画"><span>3、requestAnimationFrame循环触发帧动画</span></a></h3><h4 id="_3-1、cesiumwidget类是控制场景对象触发渲染的调度器" tabindex="-1"><a class="header-anchor" href="#_3-1、cesiumwidget类是控制场景对象触发渲染的调度器"><span>3.1、CesiumWidget类是控制场景对象触发渲染的调度器</span></a></h4><p><strong>Scene</strong> 类是一个三维空间对象的容器，它在原型链上有一个 <strong>render</strong> 方法，寥寥百行，控制了三维场景中若干物体的更新、渲染。</p><p><code>Scene.prototype.render</code> 方法调用一次，只更新并渲染<strong>一帧</strong>。</p><p><strong>WebGL</strong> 一般会和 <strong>requestAnimationFrame, (rAF)</strong> 这个 API 循环调用渲染函数。而让 <strong>canvas</strong> 中场景能连续多帧循环往复运行的调度者，是 <strong>CesiumWidget</strong> 类。</p><p>在<strong>CesiumWidget</strong>类中有一个使用<code>Object.defineProperties()</code>方法定义的<code>setter</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//使用默认循环调度    </span>
<span class="token literal-property property">useDefaultRenderLoop</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_useDefaultRenderLoop<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_useDefaultRenderLoop <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>_useDefaultRenderLoop <span class="token operator">=</span> value<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_renderLoopRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">startRenderLoop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>实例化CesiumWidget</strong>时，会使用传入的值，若没有，则是<strong>true</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>_useDefaultRenderLoop <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>useDefaultRenderLoop <span class="token operator">=</span> <span class="token function">defaultValue_default</span><span class="token punctuation">(</span>
	options<span class="token punctuation">.</span>useDefaultRenderLoop<span class="token punctuation">,</span>
	<span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦赋值，就开始<strong>CesiumJS</strong>的<strong>渲染循环</strong>，由一个在模块内的函数<strong>startRenderLoop</strong>负责控制。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">startRenderLoop</span><span class="token punctuation">(</span><span class="token parameter">widget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    widget<span class="token punctuation">.</span>_renderLoopRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> lastFrameTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">render2</span><span class="token punctuation">(</span><span class="token parameter">frameTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//frameTime表示帧时间（即上一帧和当前帧之间的时间差）</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//这里首先检查场景所属的 widget（可能是一个Cesium Viewer或其他渲染容器）是否已被销毁。如果已被销毁，则直接退出函数，不再执行渲染操作。</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>_useDefaultRenderLoop<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//检查 widget 是否使用默认的渲染循环。这意味着它是否会自动进行渲染，还是需要手动调用该函数来渲染场景。</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> targetFrameRate <span class="token operator">=</span> widget<span class="token punctuation">.</span>_targetFrameRate<span class="token punctuation">;</span><span class="token comment">//获取目标帧率，这是一个用户定义的期望帧率值。</span>
         <span class="token comment">//用于检查变量是否已定义且不为null的函数。如果目标帧率未定义，表示用户没有设置特定的目标帧率，那么就会执行以下操作。</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined_default</span><span class="token punctuation">(</span>targetFrameRate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            widget<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调整 widget 的大小，确保它适应容器的尺寸。</span>
            widget<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用 widget 的渲染方法，开始进行场景的渲染。</span>
            <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用浏览器的rAF方法来请求下一帧的渲染，以形成连续的渲染循环。</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">/</span> targetFrameRate<span class="token punctuation">;</span><span class="token comment">//计算每帧之间的时间间隔，以便在达到目标帧率时控制渲染频率。</span>
            <span class="token keyword">const</span> delta <span class="token operator">=</span> frameTime <span class="token operator">-</span> lastFrameTime<span class="token punctuation">;</span><span class="token comment">//计算当前帧与上一帧之间的时间差</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&gt;</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果时间差超过了目标间隔，说明可以进行下一帧渲染。</span>
              widget<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              widget<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">//更新 lastFrameTime，使其为上一帧的时间，以便在下一次渲染时计算时间差。</span>
              lastFrameTime <span class="token operator">=</span> frameTime <span class="token operator">-</span> delta <span class="token operator">%</span> interval<span class="token punctuation">;</span><span class="token comment">//</span>
            <span class="token punctuation">}</span>
            <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render2<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果在渲染过程中发生错误，将捕获异常并执行以下操作</span>
          widget<span class="token punctuation">.</span>_useDefaultRenderLoop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//将 _useDefaultRenderLoop 标志设置为false，表示不再使用默认的渲染循环</span>
          widget<span class="token punctuation">.</span>_renderLoopRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//将 _renderLoopRunning 标志设置为false，表示渲染循环已停止</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token punctuation">.</span>_showRenderLoopErrors<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果允许显示渲染循环错误，将执行以下操作</span>
            <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token string">&quot;An error occurred while rendering.  Rendering has stopped.&quot;</span><span class="token punctuation">;</span><span class="token comment">//显示错误面板，向用户展示发生的错误</span>
            widget<span class="token punctuation">.</span><span class="token function">showErrorPanel</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        widget<span class="token punctuation">.</span>_renderLoopRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//将 _renderLoopRunning 标志设置为false，表示渲染循环已停止</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传入的<strong>widget</strong>是<strong>CesiumWidget</strong>的实例，实现了一个灵活的渲染循环，允许根据目标帧率控制渲染频率，同时处理可能发生的渲染错误。在渲染前会检查<strong>widget</strong>是否已被销毁，以避免渲染被执行到已不再需要的场景。最后，通过<strong>递归</strong>调用<code>requestAnimationFrame</code>实现连续的渲染循环，直到渲染停止或<strong>widget</strong>被销毁。</p><h4 id="_3-2、scene对象" tabindex="-1"><a class="header-anchor" href="#_3-2、scene对象"><span>3.2、Scene对象</span></a></h4><p>对于<strong>全局</strong>而言，<strong>CesiumWidget</strong>负责控制<strong>DOM</strong>的变化情况，例如窗口尺寸变化导致<strong>DIV</strong>的变化等，并负责起<strong>渲染循环的调度</strong>。</p><p>对于<strong>单帧</strong>而言，<strong>Scene</strong>类需要使用自己原型链上的<strong>render</strong>方法完成自我状态、数据对象的更新;</p><p>以及<code>Scene.js</code>模块内的<strong>render</strong>函数<strong>触发WebGL绘制</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//Scene类原型链上的render</span>
<span class="token class-name">Scene</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_preUpdate<span class="token punctuation">.</span><span class="token function">raiseEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//事件触发，会在渲染前被调用，可以让用户在渲染之前执行一些操作。</span>
    <span class="token keyword">const</span> frameState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_frameState<span class="token punctuation">;</span><span class="token comment">//获取当前场景的帧状态对象</span>
    frameState<span class="token punctuation">.</span>newFrame <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//将newFrame标志设置为false，表示当前帧不是一个新帧</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined_default</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//检查时间参数是否已定义，如果未定义，则使用当前的JulianDate（儒略日期）作为时间</span>
      time <span class="token operator">=</span> JulianDate_default<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      <span class="token comment">//检查相机是否有更新。如果有相机更新，会返回true，否则返回false</span>
    <span class="token keyword">const</span> cameraChanged <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_view<span class="token punctuation">.</span><span class="token function">checkForCameraUpdates</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**判断是否需要渲染场景
   !this.requestRenderMode: 如果没有设置requestRenderMode属性，表示始终要进行渲染。
	this._renderRequested: 如果_renderRequested属性为true，表示已经请求过渲染。
	cameraChanged: 如果相机有更新，表示需要进行渲染。
	this._logDepthBufferDirty: 如果深度缓冲区有更新，表示需要进行渲染。
	this._hdrDirty: 如果高动态范围(HDR)设置有更新，表示需要进行渲染。
	this.mode === SceneMode_default.MORPHING: 如果场景模式为“MORPHING”，表示需要进行渲染。*/</span>
    <span class="token keyword">let</span> shouldRender <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestRenderMode <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_renderRequested <span class="token operator">||</span> cameraChanged <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_logDepthBufferDirty <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_hdrDirty <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">===</span> SceneMode_default<span class="token punctuation">.</span><span class="token constant">MORPHING</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果shouldRender为false，并且定义了maximumRenderTimeChange属性和_lastRenderTime属性，则判断是否超过了最大渲染时间间隔，如果超过则需要进行渲染</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldRender <span class="token operator">&amp;&amp;</span> <span class="token function">defined_default</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maximumRenderTimeChange<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined_default</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_lastRenderTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> difference <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>
        JulianDate_default<span class="token punctuation">.</span><span class="token function">secondsDifference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_lastRenderTime<span class="token punctuation">,</span> time<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      shouldRender <span class="token operator">=</span> shouldRender <span class="token operator">||</span> difference <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maximumRenderTimeChange<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRender<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果需要进行渲染，执行以下操作</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_lastRenderTime <span class="token operator">=</span> JulianDate_default<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> 		<span class="token keyword">this</span><span class="token punctuation">.</span>_lastRenderTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将当前时间克隆到_lastRenderTime，用于计算下一次渲染的时间间隔</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_renderRequested <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//将_renderRequested属性设置为false，表示渲染已经被处理</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_logDepthBufferDirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//将_logDepthBufferDirty属性设置为false，表示深度缓冲区已更新。</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_hdrDirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 将_hdrDirty属性设置为false，表示HDR设置已更新</span>
      <span class="token keyword">const</span> frameNumber <span class="token operator">=</span> Math_default<span class="token punctuation">.</span><span class="token function">incrementWrap</span><span class="token punctuation">(</span>
        frameState<span class="token punctuation">.</span>frameNumber<span class="token punctuation">,</span>
        <span class="token number">15e6</span><span class="token punctuation">,</span>
        <span class="token number">1</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新帧号，将frameState.frameNumber递增，并在达到最大值时循环回来（15e6表示最大值）</span>
      <span class="token function">updateFrameNumber</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> frameNumber<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 更新场景的帧数相关参数</span>
      frameState<span class="token punctuation">.</span>newFrame <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">tryAndCatchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> prePassesUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在渲染前尝试执行prePassesUpdate函数，并捕获可能发生的错误</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>primitives<span class="token punctuation">.</span>show<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果场景中的图元（primitives）显示（即可见），则执行以下操作</span>
      <span class="token function">tryAndCatchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> updateMostDetailedRayPicks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在渲染前尝试执行updateMostDetailedRayPicks函数，并捕获可能发生的错误</span>
      <span class="token function">tryAndCatchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> updatePreloadPass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在渲染前尝试执行updatePreloadPass函数，并捕获可能发生的错误</span>
      <span class="token function">tryAndCatchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> updatePreloadFlightPass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在渲染前尝试执行updatePreloadFlightPass函数，并捕获可能发生的错误</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldRender<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果不需要渲染（即shouldRender为false），尝试执行updateRequestRenderModeDeferCheckPass函数，并捕获可能发生的错误</span>
        <span class="token function">tryAndCatchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> updateRequestRenderModeDeferCheckPass<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_postUpdate<span class="token punctuation">.</span><span class="token function">raiseEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//事件触发，会在渲染后被调用，可以让用户在渲染之后执行一些操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_preRender<span class="token punctuation">.</span><span class="token function">raiseEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//事件触发，在渲染前被调用，可以让用户在渲染之前执行一些操作</span>
      frameState<span class="token punctuation">.</span>creditDisplay<span class="token punctuation">.</span><span class="token function">beginFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 开始帧处理，用于显示相应的信用信息（例如Cesium logo）</span>
      <span class="token function">tryAndCatchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> render<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尝试执行渲染操作，交给Scene.js模块的render函数触发WebGL绘制，并捕获可能发生的错误</span>
    <span class="token punctuation">}</span>
    <span class="token function">updateDebugShowFramesPerSecond</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> shouldRender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新是否显示帧率的调试信息，根据是否进行了渲染来确定</span>
    <span class="token function">tryAndCatchError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> postPassesUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在渲染后尝试执行postPassesUpdate函数，并捕获可能发生的错误</span>
    <span class="token function">callAfterRenderFunctions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用在渲染后执行的函数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_postRender<span class="token punctuation">.</span><span class="token function">raiseEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//事件触发，在渲染后被调用，可以让用户在渲染之后执行一些操作</span>
      frameState<span class="token punctuation">.</span>creditDisplay<span class="token punctuation">.</span><span class="token function">endFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结束帧处理，清除之前显示的信用信息</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现了一个灵活的场景渲染流程，根据<strong>场景中的变化情况和用户设置的参数</strong>来确定是否进行渲染。在渲染前和渲染后触发了多个事件，用户可以通过<strong>监听</strong>这些事件来扩展场景渲染的功能。同时，代码中对错误的捕获和处理也有一定的保障</p><p><strong>Scene</strong> 类是一个场景对象容器，其<code>Scene.prototype.render()</code> 方法负责：</p><ul><li>生命周期事件（<strong>preUpdate、preRender、postUpdate、postRender</strong>）回调触发；</li><li>更新帧状态和帧号</li><li>更新 <strong>Scene</strong> 中的 <strong>Primitive</strong></li><li>移交渲染权给模块内的 <strong>render</strong> 函数触发 <strong>WebGL</strong> 绘制</li></ul><p><code>Scene.prototype.render()</code>并没有更新椭球体，没有请求地形四叉树瓦片，而是等待更重要的 <strong>Primitive</strong> 等三维物体的更新后，才判断 <strong>globe</strong> 是否存在，从而决定要不要画地球（的皮肤），最终才更新并执行 <strong>Command</strong>，也就是 <code>scene.updateAndExecuteCommands(passState, backgroundColor)</code>;</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//Scene.js模块内的render函数，触发WebGL绘制 </span>
<span class="token keyword">var</span> scratchBackgroundColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">scene</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> frameState <span class="token operator">=</span> scene<span class="token punctuation">.</span>_frameState<span class="token punctuation">;</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> scene<span class="token punctuation">.</span>context<span class="token punctuation">;</span>
    <span class="token keyword">const</span> us <span class="token operator">=</span> context<span class="token punctuation">.</span>uniformState<span class="token punctuation">;</span>
    <span class="token keyword">const</span> view <span class="token operator">=</span> scene<span class="token punctuation">.</span>_defaultView<span class="token punctuation">;</span>
    scene<span class="token punctuation">.</span>_view <span class="token operator">=</span> view<span class="token punctuation">;</span>
    scene<span class="token punctuation">.</span><span class="token function">updateFrameState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    frameState<span class="token punctuation">.</span>passes<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    frameState<span class="token punctuation">.</span>passes<span class="token punctuation">.</span>postProcess <span class="token operator">=</span> scene<span class="token punctuation">.</span>postProcessStages<span class="token punctuation">.</span>hasSelected<span class="token punctuation">;</span>
    frameState<span class="token punctuation">.</span>tilesetPassState <span class="token operator">=</span> renderTilesetPassState<span class="token punctuation">;</span>
    <span class="token keyword">let</span> backgroundColor <span class="token operator">=</span> <span class="token function">defaultValue_default</span><span class="token punctuation">(</span>scene<span class="token punctuation">.</span>backgroundColor<span class="token punctuation">,</span> Color_default<span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scene<span class="token punctuation">.</span>_hdr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      backgroundColor <span class="token operator">=</span> Color_default<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">,</span> scratchBackgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      backgroundColor<span class="token punctuation">.</span>red <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">.</span>red<span class="token punctuation">,</span> scene<span class="token punctuation">.</span>gamma<span class="token punctuation">)</span><span class="token punctuation">;</span>
      backgroundColor<span class="token punctuation">.</span>green <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">.</span>green<span class="token punctuation">,</span> scene<span class="token punctuation">.</span>gamma<span class="token punctuation">)</span><span class="token punctuation">;</span>
      backgroundColor<span class="token punctuation">.</span>blue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">.</span>blue<span class="token punctuation">,</span> scene<span class="token punctuation">.</span>gamma<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    frameState<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> backgroundColor<span class="token punctuation">;</span>
    scene<span class="token punctuation">.</span>fog<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>frameState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    us<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>frameState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> shadowMap <span class="token operator">=</span> scene<span class="token punctuation">.</span>shadowMap<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">defined_default</span><span class="token punctuation">(</span>shadowMap<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> shadowMap<span class="token punctuation">.</span>enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined_default</span><span class="token punctuation">(</span>scene<span class="token punctuation">.</span>light<span class="token punctuation">)</span> <span class="token operator">||</span> scene<span class="token punctuation">.</span>light <span class="token keyword">instanceof</span> <span class="token class-name">SunLight_default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Cartesian3_default<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span>us<span class="token punctuation">.</span>sunDirectionWC<span class="token punctuation">,</span> scene<span class="token punctuation">.</span>_shadowMapCamera<span class="token punctuation">.</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        Cartesian3_default<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>scene<span class="token punctuation">.</span>light<span class="token punctuation">.</span>direction<span class="token punctuation">,</span> scene<span class="token punctuation">.</span>_shadowMapCamera<span class="token punctuation">.</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      frameState<span class="token punctuation">.</span>shadowMaps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>shadowMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    scene<span class="token punctuation">.</span>_computeCommandList<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    scene<span class="token punctuation">.</span>_overlayCommandList<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> viewport <span class="token operator">=</span> view<span class="token punctuation">.</span>viewport<span class="token punctuation">;</span>
    viewport<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    viewport<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    viewport<span class="token punctuation">.</span>width <span class="token operator">=</span> context<span class="token punctuation">.</span>drawingBufferWidth<span class="token punctuation">;</span>
    viewport<span class="token punctuation">.</span>height <span class="token operator">=</span> context<span class="token punctuation">.</span>drawingBufferHeight<span class="token punctuation">;</span>
    <span class="token keyword">const</span> passState <span class="token operator">=</span> view<span class="token punctuation">.</span>passState<span class="token punctuation">;</span>
    passState<span class="token punctuation">.</span>framebuffer <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
    passState<span class="token punctuation">.</span>blendingEnabled <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
    passState<span class="token punctuation">.</span>scissorTest <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
    passState<span class="token punctuation">.</span>viewport <span class="token operator">=</span> BoundingRectangle_default<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span>viewport<span class="token punctuation">,</span> passState<span class="token punctuation">.</span>viewport<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">defined_default</span><span class="token punctuation">(</span>scene<span class="token punctuation">.</span>globe<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      scene<span class="token punctuation">.</span>globe<span class="token punctuation">.</span><span class="token function">beginFrame</span><span class="token punctuation">(</span>frameState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    scene<span class="token punctuation">.</span><span class="token function">updateEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scene<span class="token punctuation">.</span><span class="token function">updateAndExecuteCommands</span><span class="token punctuation">(</span>passState<span class="token punctuation">,</span> backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新并执行 Command</span>
    scene<span class="token punctuation">.</span><span class="token function">resolveFramebuffers</span><span class="token punctuation">(</span>passState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    passState<span class="token punctuation">.</span>framebuffer <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">executeOverlayCommands</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> passState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">defined_default</span><span class="token punctuation">(</span>scene<span class="token punctuation">.</span>globe<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      scene<span class="token punctuation">.</span>globe<span class="token punctuation">.</span><span class="token function">endFrame</span><span class="token punctuation">(</span>frameState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scene<span class="token punctuation">.</span>globe<span class="token punctuation">.</span>tilesLoaded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scene<span class="token punctuation">.</span>_renderRequested <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    context<span class="token punctuation">.</span><span class="token function">endFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3、三维地球构成" tabindex="-1"><a class="header-anchor" href="#_3-3、三维地球构成"><span>3.3、三维地球构成</span></a></h4><p>CesiumJS 的三维地球，实际上分两大部分：</p><ul><li>地球椭球体与表面的 GIS 影像服务</li><li>场景中的三维物体</li></ul><p>CesiumJS 内置了大量的默认值，包括地球椭球体以及影像服务（默认用的必应瓦片服务，要 token）。但是，实际上可以不需要地球椭球体和底图的：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">defined</span><span class="token punctuation">(</span>scene<span class="token punctuation">.</span>globe<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     scene<span class="token punctuation">.</span>globe<span class="token punctuation">.</span><span class="token function">beginFrame</span><span class="token punctuation">(</span>frameState<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码片段是 <code>Scene.js</code> 模块内的 <strong>render</strong> 函数的一小段，也就是说，若没有定义 <strong>globe</strong>，那就不绘制椭球上的帧。</p><figure><img src="`+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4、渲染原理之渲染primitive" tabindex="-1"><a class="header-anchor" href="#_4、渲染原理之渲染primitive"><span>4、渲染原理之渲染Primitive</span></a></h3><p><strong>Scene.js</strong> 模块内的 <strong>render</strong> 函数会将控制权交给 <strong>WebGL</strong>，执行 CesiumJS 自己封装的<strong>指令对象</strong>，画出<strong>每一帧</strong>来。</p><p>模块内的 <strong>render</strong> 函数首先会更新一批状态信息，譬如帧状态、雾效、Uniform 值、通道状态、三维场景中的环境信息等，然后就开始更新并执行指令，调用的是 <strong>Scene</strong> 原型链上的 <code>updateAndExecuteCommands</code> 方法。</p><p>整个过程大致调用为：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-1、指令" tabindex="-1"><a class="header-anchor" href="#_4-1、指令"><span>4.1、指令</span></a></h4><figure><img src="'+C+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>CesiumJS 有三类指令：</p><ul><li><strong>DrawCommand</strong> 绘图指令</li><li><strong>ClearCommand</strong> 清屏指令</li><li><strong>ComputeCommand</strong> 计算指令</li></ul><p>绘图指令最终会把控制权交给 <code>Context</code> 对象，根据自身的着色器对象，绘制自己身上的数据资源;</p><p>清屏指令比较简单，目的就是调用 WebGL 的清屏函数，清空各类缓冲区并填充清空后的颜色值，依旧会把控制权传递给 <code>Context</code> 对象;</p><p>计算指令则借助 WebGL 并行计算的特点，将指令对象上的数据在着色器中编码、计算、解码，最后写入到输出缓冲（通常是帧缓冲的纹理上），同样控制权会给到 <code>Context</code> 对象。</p><h4 id="_4-2、通道" tabindex="-1"><a class="header-anchor" href="#_4-2、通道"><span>4.2、通道</span></a></h4><p>一帧是由多个通道顺序绘制构成的，在 CesiumJS 中，通道英文单词是 <strong>Pass</strong></p><p>既然通道的绘制是有顺序的，其顺序保存在 <code>Renderer/Pass.js</code> 模块导出的冻结对象中，目前（1.107版本）有 10 个优先顺序等级（最后 <code>NUMBER_OF_PASSES</code> 是通道的数量）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> Pass <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">ENVIRONMENT</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token constant">COMPUTE</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token constant">GLOBE</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token constant">TERRAIN_CLASSIFICATION</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token constant">CESIUM_3D_TILE</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token constant">CESIUM_3D_TILE_CLASSIFICATION</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token constant">CESIUM_3D_TILE_CLASSIFICATION_IGNORE_SHOW</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token constant">OPAQUE</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token constant">TRANSLUCENT</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token constant">VOXELS</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token constant">OVERLAY</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token constant">NUMBER_OF_PASSES</span><span class="token operator">:</span> <span class="token number">11</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上为例，第一优先被绘制的指令，是环境（<code>ENVIRONMENT: 0</code>）方面的对象、物体。而不透明（<code>OPAQUE: 7</code>）的三维对象的绘制指令，则要先于透明（<code>TRANSLUCENT: 8</code>）物体被执行。</p><p><strong>CesiumJS</strong> 会在<strong>每一帧即将开始绘制前，对所有已经收集好的指令根据通道进行排序，实现顺序绘制</strong>。</p><h4 id="_4-3、生成并执行指令" tabindex="-1"><a class="header-anchor" href="#_4-3、生成并执行指令"><span>4.3、生成并执行指令</span></a></h4><p>原型链上的 <code>updateAndExecuteCommands</code> 方法会做模式判断，我们一般使用的是三维模式（<code>SceneMode.SCENE3D</code>），所以只需要看 <code>else if</code> 分支即可，也就是</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">executeCommandsInViewport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> passState<span class="token punctuation">,</span> backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处，<strong>this</strong> 就是 <strong>Scene</strong> 自己。</p><p><code>executeCommandsInViewport()</code> 是一个 <code>Scene.js</code> 模块内的函数，这个函数比较短，对于当前我们关心的东西，只需要看它调用的 <code>updateAndRenderPrimitives()</code> 和最后的 <code>executeCommands2()</code> 函数调用即可。</p><h5 id="_4-3-1、primitive-生成指令" tabindex="-1"><a class="header-anchor" href="#_4-3-1、primitive-生成指令"><span>4.3.1、Primitive 生成指令</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token punctuation">[</span>Module Scene<span class="token punctuation">.</span>js<span class="token punctuation">]</span>
 <span class="token operator">-</span> fn <span class="token function">updateAndRenderPrimitives</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">[</span>Module Primitive<span class="token punctuation">.</span>js<span class="token punctuation">]</span>
   <span class="token operator">-</span> fn <span class="token function">createCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token operator">-</span> fn <span class="token function">updateAndQueueCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Scene.js</code> 模块内的函数 <code>updateAndRenderPrimitives()</code> 负责更新 <strong>Scene</strong> 上所有的 <strong>Primitive</strong>。</p><p>期间，控制权会通过 <strong>PrimitiveCollection</strong> 转移到 <strong>Primitive</strong> 类（或者有类似结构的类，譬如 <strong>Cesium3DTileset</strong> 等）上，令其更新本身的数据资源，根据情况创建新的着色器，并随之创建 <strong>绘图指令</strong>，最终在 <code>Primitive.js</code> 模块内的 <code>updateAndQueueCommands()</code> 函数排序、并推入帧状态对象的指令列表上。</p><h5 id="_4-3-2、context对象执行webgl底层代码" tabindex="-1"><a class="header-anchor" href="#_4-3-2、context对象执行webgl底层代码"><span>4.3.2、Context对象执行WebGL底层代码</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token punctuation">[</span>Module Scene<span class="token punctuation">.</span>js<span class="token punctuation">]</span>
 <span class="token operator">-</span> fn <span class="token function">executeCommands2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token operator">-</span> fn <span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 收到 Command 和 Context</span>
   <span class="token punctuation">[</span>Module Context<span class="token punctuation">.</span>js<span class="token punctuation">]</span>
   <span class="token operator">-</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个模块内的函数 <code>executeCommands2()</code> 则负责执行这些指令（中间还有一些小插曲，下文再提）。</p><p>此时，上文的“通道”再次起作用，此函数内会根据 <strong>Pass</strong> 的优先顺序依次更新唯一值状态（<strong>UniformState</strong>），然后下发给 <code>executeCommand()</code> 函数（注意少了个<code>s</code>）以具体的某个指令对象以及 <code>Context</code> 对象。</p><blockquote><p>除了 <code>executeCommand()</code> 函数外，<code>Scene.js</code> 模块内仍还有其它类似的函数，例如 <code>executeIdCommand()</code> 负责执行绘制 ID 信息纹理的指令，</p><p><code>executeTranslucentCommandsBackToFront()</code> / <code>executeTranslucentCommandsFrontToBack()</code> 函数负责透明物体的指令等。</p><p>甚至在 Scene 对象自己的属性中，就有清屏指令字段，会在 <code>executeCommands()</code> 函数中直接执行，不经过上述几个执行具体指令的函数。</p></blockquote><p><strong>Context</strong> 对象是对 <code>WebGL(2)RenderingContext</code> 等 <strong>WebGL</strong> 原生接口、参数的封装，所有指令对象最终都会由其进行拆包装、组装 WebGL 函数调用并执行绘图、计算、清屏。</p><h4 id="_4-4、指令对象转移" tabindex="-1"><a class="header-anchor" href="#_4-4、指令对象转移"><span>4.4、指令对象转移</span></a></h4><p>指令对象在 Primitive（或类似的类）生成后，由 模块内的 <code>updateAndQueueCommands()</code> 函数排序并推入帧状态对象的指令列表上：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">// updateAndQueueCommands 函数中，函数接收来自 Scene 逐级传入的帧状态对象 -- frameState</span>
 <span class="token keyword">const</span> commandList <span class="token operator">=</span> frameState<span class="token punctuation">.</span>commandList<span class="token punctuation">;</span>
 <span class="token keyword">const</span> passes <span class="token operator">=</span> frameState<span class="token punctuation">.</span>passes<span class="token punctuation">;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>passes<span class="token punctuation">.</span>render <span class="token operator">||</span> passes<span class="token punctuation">.</span>pick<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// ... 省略部分代码</span>
   commandList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>colorCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>frameState.commandList</code> 就是个普通的数组。</p><p>而在执行时，却是从 <strong>View</strong> 对象上的 <strong>frustumCommandsList</strong> 上取的指令：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">// Scene.js 模块的 executeCommands2() 函数中</span>
 <span class="token keyword">const</span> frustumCommandsList <span class="token operator">=</span> view<span class="token punctuation">.</span>frustumCommandsList<span class="token punctuation">;</span>
 <span class="token keyword">const</span> numFrustums <span class="token operator">=</span> frustumCommandsList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
 <span class="token comment">//...</span>
 <span class="token keyword">let</span> j<span class="token punctuation">;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numFrustums<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> index <span class="token operator">=</span> numFrustums <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">const</span> frustumCommands <span class="token operator">=</span> frustumCommandsList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
   
   <span class="token comment">// ...</span>
   
   <span class="token comment">// 截取不透明物体的通道指令执行代码片段</span>
   us<span class="token punctuation">.</span><span class="token function">updatePass</span><span class="token punctuation">(</span>Pass<span class="token punctuation">.</span><span class="token constant">OPAQUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   commands <span class="token operator">=</span> frustumCommands<span class="token punctuation">.</span>commands<span class="token punctuation">[</span>Pass<span class="token punctuation">.</span><span class="token constant">OPAQUE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   length <span class="token operator">=</span> frustumCommands<span class="token punctuation">.</span>indices<span class="token punctuation">[</span>Pass<span class="token punctuation">.</span><span class="token constant">OPAQUE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">executeCommand</span><span class="token punctuation">(</span>commands<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> scene<span class="token punctuation">,</span> context<span class="token punctuation">,</span> passState<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   
   <span class="token comment">// ...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，下发给 <code>executeCommand()</code> 函数的 <code>commands[j]</code> 参数，就是具体的某个指令对象。</p><p>而在这个传递下发的过程中，是通过 <code>View.prototype.createPotentiallyVisibleSet</code>实现的。</p><h5 id="_4-4-1、筛选可见集" tabindex="-1"><a class="header-anchor" href="#_4-4-1、筛选可见集"><span>4.4.1、筛选可见集</span></a></h5><p><strong>View</strong> 对象是 <strong>Scene</strong>、<strong>Camera</strong> 之间的纽带，负责“眼睛”与“世界”之间信息的处理，即视图。</p><p><code>View.prototype.createPotentiallyVisibleSet</code>的作用，就是把 <strong>Scene</strong> 上的计算指令、覆盖物指令，帧状态上的指令列表，根据 <strong>View</strong> 的可见范围做一次筛选，减少要执行指令个数提升性能。</p><p>具体来说，就是把分散在各处的指令，筛选后绑至 <strong>View</strong> 对象的 <strong>frustumCommandsList</strong> 列表中，借助 <code>View.js</code> 模块内的 <code>insertIntoBin()</code> 函数完成：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">// View.js 模块内</span>
 
 <span class="token keyword">function</span> <span class="token function">insertIntoBin</span><span class="token punctuation">(</span><span class="token parameter">view<span class="token punctuation">,</span> scene<span class="token punctuation">,</span> command<span class="token punctuation">,</span> commandNear<span class="token punctuation">,</span> commandFar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
   
   <span class="token keyword">const</span> frustumCommandsList <span class="token operator">=</span> view<span class="token punctuation">.</span>frustumCommandsList<span class="token punctuation">;</span>
   <span class="token keyword">const</span> length <span class="token operator">=</span> frustumCommandsList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// ...</span>
     
     frustumCommands<span class="token punctuation">.</span>commands<span class="token punctuation">[</span>pass<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> command<span class="token punctuation">;</span>
    
     <span class="token comment">// ...</span>
   <span class="token punctuation">}</span>
   
   <span class="token comment">// ...</span>
 <span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数内做了对<strong>指令的筛选判断</strong>。</p><h3 id="_5、渲染原理之渲染entity" tabindex="-1"><a class="header-anchor" href="#_5、渲染原理之渲染entity"><span>5、渲染原理之渲染Entity</span></a></h3><blockquote><p>Entity参数对象最终会被解析变成Primitive，几何类型的Entity转变为几何类型的Primitive，但是其他类型的呢？例如：Label、Model、Wall、tileset这些又该如何转化为Primitive？？</p><p>解答：</p><ol><li>不同的Entity会触发生成不同的Visualizer（可视化器）</li><li>其中GeometryVisualizer会通过GeometryUpdaterSet创建Updater（更新器），然后进行分批、更新。</li><li>其中Cesium3Dtiles会在 <code>Cesium3DTilesetVisualizer.prototype.update</code>调用 <code>createTileset(resource, tilesetHash, entity, primitives)</code>方法</li><li>Model会在 <code>ModelVisualizer.prototype.update</code>调用 <code>createModelPrimitive(this, entity, resource, incrementallyLoadTextures)</code>方法</li><li>其余的可以详看源码中对应的<code>xxxx.prototype.update</code>方法。</li></ol></blockquote><p>在创建三维几何体或三维模型的时候，只需要传入参数对象，就可以实现Entity的创建。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> modelEntity <span class="token operator">=</span> viewer<span class="token punctuation">.</span>entites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;some-entitiy&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;some-name&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">position</span><span class="token operator">:</span> Cartesian3<span class="token punctuation">.</span><span class="token function">fromDegrees</span><span class="token punctuation">(</span><span class="token number">112.5</span><span class="token punctuation">,</span> <span class="token number">22.3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">uri</span><span class="token operator">:</span> <span class="token string">&#39;path/to/model.glb&#39;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Entity与Primitive之间的对比：</p><ul><li>前者使用 Property API 使得动态效果简单化，后者需要自己编写着色器；</li><li>个体数量较多时，前者的性能不如后者；</li><li>后者支持较底层的用法，可以自己控制材质着色器、几何数据并批优化；</li><li>...</li></ul><blockquote><p><strong>但是Entity最终会变成Primitive，其中Entity API是如何从参数化对象到WebGL渲染？</strong></p></blockquote><p>上述代码可以得出，<strong>Entity API</strong>的入口是<strong>Viewer</strong>，而不是像<strong>Primitive API</strong>是从<strong>Scene</strong>访问的，即：</p><p><strong>Entity API必须依赖Viewer容器。</strong></p><h4 id="_5-1、entity-api必须依赖viewer容器" tabindex="-1"><a class="header-anchor" href="#_5-1、entity-api必须依赖viewer容器"><span>5.1、Entity API必须依赖Viewer容器</span></a></h4><p><strong>Viewer</strong> 其实是 <strong>CesiumJS</strong> 长期维护的一个成果，它在大多数时候扮演的是 <strong>Web3D GIS</strong> 地球的总入口对象。</p><p><strong>Scene</strong> 暴露出来的 Primitive API 是一种比较接近 WebGL 数据接口的 API，面对接近业务层的数据格式，譬如 GeoJSON、KML、GPX 等，Primitive API 就比较麻烦。</p><p>虽然可以做一些转换接口，不过 <strong>Cesium</strong> 团队结合自己研发的数据标记语言 -- <strong>CZML</strong>，配上<strong>内置的时钟</strong>，封装出了更高级别的架构。</p><p><strong>CesiumJS</strong> 使用 <strong>DataSource API</strong> 和 <strong>Entity API</strong> 这套组合实现了复杂、动态空间地理数据格式的接入。</p><h5 id="_5-1-1、高层数据模型的封装-datasource-api" tabindex="-1"><a class="header-anchor" href="#_5-1-1、高层数据模型的封装-datasource-api"><span>5.1.1、高层数据模型的封装 - DataSource API</span></a></h5><p>Entity API的基础设施。</p><p>首先，分别看定义在 <code>Viewer</code> 原型链上的两个属性 <code>entities</code>、<code>dataSourceDisplay</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token class-name">Viewer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
   <span class="token literal-property property">dataSourceDisplay</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_dataSourceDisplay<span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token literal-property property">entities</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_dataSourceDisplay<span class="token punctuation">.</span>defaultDataSource<span class="token punctuation">.</span>entities<span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token comment">// ...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面两个 getter 看，<strong>EntityCollection</strong> 似乎是被 <strong>DataSourceDisplay</strong> 对象的 <strong>defaultDataSource</strong> 管辖的；<strong>defaultDataSource</strong> 是 <strong>CustomDataSource</strong> 类型的。</p><p><strong>Viewer</strong> 拥有一个 <strong>DataSourceDisplay</strong> 成员，<strong>它负责所有 DataSource 的更新</strong>。</p><h5 id="_5-1-2、显示管理器-datasourcedisplay-与默认数据源-customdatasource" tabindex="-1"><a class="header-anchor" href="#_5-1-2、显示管理器-datasourcedisplay-与默认数据源-customdatasource"><span>5.1.2、显示管理器 DataSourceDisplay 与默认数据源 CustomDataSource</span></a></h5><p>它随 <strong>Viewer</strong> 创建而创建，而且优先级相当高，仅次于 <strong>CesiumWidget</strong>；它自己则创建默认的 <strong>DataSource</strong>，也就是 <strong>CustomDataSource</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">// DataSourceDisplay.js</span>
 <span class="token keyword">function</span> <span class="token function">DataSourceDisplay</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
    <span class="token keyword">const</span> defaultDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomDataSource_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onDataSourceAdded</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span> defaultDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_defaultDataSource <span class="token operator">=</span> defaultDataSource<span class="token punctuation">;</span>
   <span class="token comment">// ...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个 <strong>CustomDataSource</strong> 的构造函数里，就能找到 <strong>Viewer</strong> 暴露出去的 <strong>EntityCollection</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">// CustomDataSource.js</span>
 <span class="token keyword">function</span> <span class="token function">CustomDataSource</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>_entityCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntityCollection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// ...</span>
 <span class="token punctuation">}</span>
 
 Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token class-name">CustomDataSource</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
   <span class="token literal-property property">entities</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_entityCollection<span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token comment">// ...</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，包含关系就说清楚了：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> Viewer
 ┖ DataSourceDisplay
   ┖ CustomDataSource
     ┖ EntityCollection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>DataSourceDisplay</strong> 除了管着 <strong>CustomDataSource</strong> 这个服务于 <strong>Entity API</strong> 的默认数据源外，还管着其它的 <strong>DataSource</strong>，其它的都会装入 <strong>DataSourceDisplay</strong> 的 <strong>DataSourceCollection</strong> 容器下，譬如 <strong>GeoJsonDataSource</strong>、<strong>CzmlDataSource</strong> 等，在文档中搜 DataSource 关键字基本能找齐。</p></blockquote><h5 id="_5-1-3、默认数据源-customdatasource" tabindex="-1"><a class="header-anchor" href="#_5-1-3、默认数据源-customdatasource"><span>5.1.3、默认数据源：CustomDataSource</span></a></h5><p>默认的数据源的作用，就是给 <strong>Entity API</strong> 提供土壤。</p><p>但是 <strong>CustomDataSource</strong> 并不是只能给 <strong>Entity API</strong> 使用，在官方沙盒中可以找到直接使用 <strong>CustomDataSource</strong> 的例子。</p><h5 id="_5-1-4、datasource-api与scene之间的联系" tabindex="-1"><a class="header-anchor" href="#_5-1-4、datasource-api与scene之间的联系"><span>5.1.4、DataSource API与Scene之间的联系</span></a></h5><p>目前了解的，在<strong>Cesium</strong>中，只有<strong>Scene</strong>上的<strong>PrimitiveCollection</strong>才有权力更新<strong>Primitive</strong>，进而创建<strong>DrawCommand</strong>。</p><p>而<strong>DataSource API</strong>被包含于<strong>DataSourceDisplay</strong>对象，<strong>DataSourceDisplay</strong>对象拥有一个<strong>私有的primitiveCollection</strong>成员对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">DataSourceDisplay</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// ...</span>
   <span class="token keyword">const</span> scene <span class="token operator">=</span> options<span class="token punctuation">.</span>scene<span class="token punctuation">;</span>
   <span class="token keyword">const</span> dataSourceCollection <span class="token operator">=</span> options<span class="token punctuation">.</span>dataSourceCollection<span class="token punctuation">;</span>
   <span class="token comment">// ...</span>
   
    <span class="token keyword">let</span> primitivesAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> primitives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrimitiveCollection_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> groundPrimitives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrimitiveCollection_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//这个私有的 PrimitiveCollection 创建完成后，就把它添加到 Scene 的 PrimitiveCollection 中了，伴随着 CesiumWidget 调度的渲染循环进行帧渲染。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSourceCollection<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      scene<span class="token punctuation">.</span>primitives<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>primitives<span class="token punctuation">)</span><span class="token punctuation">;</span>
      scene<span class="token punctuation">.</span>groundPrimitives<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>groundPrimitives<span class="token punctuation">)</span><span class="token punctuation">;</span>
      primitivesAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     
    <span class="token keyword">this</span><span class="token punctuation">.</span>_primitives <span class="token operator">=</span> primitives<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_groundPrimitives <span class="token operator">=</span> groundPrimitives<span class="token punctuation">;</span>
   
   <span class="token comment">// ...</span>
   
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>primitivesAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 对于 dataSourceCollection.length 是 0 的情况</span>
     <span class="token comment">// 使用事件机制把私有的 PrimitiveCollection 添加到 scene.primitives 中</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>PrimitiveCollection</strong> 支持嵌套添加，也就是 <strong>Collection</strong> 可以添加到 <strong>Collection</strong> 中，<strong>update</strong> 时也会树状逐级向下更新。</p></blockquote><h4 id="_5-2、可视化器——visualizer" tabindex="-1"><a class="header-anchor" href="#_5-2、可视化器——visualizer"><span>5.2、可视化器——Visualizer</span></a></h4><blockquote><p>问题：可视化器是什么？</p></blockquote><p>在<strong>Cesium</strong>中，<strong>Visualizer</strong>是用于将实体(<strong>Entity</strong>)与场景(<strong>Scene</strong>)进行关联的组件。<strong>Visualizer负责处理实体的渲染、更新和交互等任务</strong>。<strong>Cesium</strong>中的实体是地理空间中的对象，可以是点、线、多边形、模型等。</p><p><strong>Visualizer</strong>的作用是根据实体的属性和状态来生成对应的可视化效果，并将其添加到场景中。当实体的属性发生变化或需要更新时，<strong>Visualizer</strong>会负责更新渲染效果，从而保持场景的实时同步。</p><p><strong>Cesium</strong>中内置了多个<strong>Visualizer</strong>，用于处理不同类型的实体，例如：</p><ol><li>PointVisualizer：处理点实体的渲染。</li><li>PolylineVisualizer：处理线实体的渲染。</li><li>PolygonVisualizer：处理多边形实体的渲染。</li><li>ModelVisualizer：处理模型实体的渲染。</li></ol><p>通过将实体与<strong>Visualizer</strong>关联，<strong>Cesium</strong>可以高效地管理大量的地理空间数据，并在三维场景中进行动态展示。<strong>Visualizer</strong>的灵活性也使得开发者可以根据需要<strong>自定义</strong>新的<strong>Visualizer</strong>来处理特定类型的实体或实现特定的渲染效果。</p><h5 id="_5-2-1、为customdatasource创建visualizer" tabindex="-1"><a class="header-anchor" href="#_5-2-1、为customdatasource创建visualizer"><span>5.2.1、为CustomDataSource创建Visualizer</span></a></h5><p>在<strong>DataSourceDisplay</strong>创建<strong>defaultDataSource</strong>时，会主动调用<code>_onDataSourceAdded</code>方法：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// packages/engine/Source/DataSources/DataSourceDisplay.js</span>
<span class="token keyword">const</span> defaultDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomDataSource_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将CustomDataSource类型的实例defaultDataSource作为参数传入_onDataSourceAdded方法</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onDataSourceAdded</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span> defaultDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_defaultDataSource <span class="token operator">=</span> defaultDataSource<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Viewer
┖CesiumWidget
┖DataSourceDisplay
	┖DataSourceCollection
	┖CustomDataSource
		┖EntityCollection
			┖Entity

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_onDataSourceAdded</code>方法会给<strong>defaultDataSource</strong>再创建一个私有的<strong>PrimitiveCollection</strong>添加到<strong>DataSourceDisplay</strong>的<strong>PrimitiveCollection</strong>中。紧接着会调用<code>_visualizersCallback</code>方法创建<strong>可视化器。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">// DataSourceDisplay.prototype._onDataSourceAdded 中</span>
 dataSource<span class="token punctuation">.</span>_visualizers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_visualizersCallback</span><span class="token punctuation">(</span>
   scene<span class="token punctuation">,</span>
   entityCluster<span class="token punctuation">,</span>
   dataSource
 <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">DataSourceDisplay</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_visualizersCallback <span class="token operator">=</span> <span class="token function">defaultValue</span><span class="token punctuation">(</span>
    options<span class="token punctuation">.</span>visualizersCallback<span class="token punctuation">,</span>
    DataSourceDisplay<span class="token punctuation">.</span>defaultVisualizersCallback
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">//_visualizersCallback方法会返回一个Visualizer对象数组</span>
DataSourceDisplay<span class="token punctuation">.</span><span class="token function-variable function">defaultVisualizersCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>
<span class="token parameter">scene<span class="token punctuation">,</span>
entityCluster<span class="token punctuation">,</span>
dataSource</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> entities <span class="token operator">=</span> dataSource<span class="token punctuation">.</span>entities<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">BillboardVisualizer_default</span><span class="token punctuation">(</span>entityCluster<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">GeometryVisualizer_default</span><span class="token punctuation">(</span>
        scene<span class="token punctuation">,</span>
        entities<span class="token punctuation">,</span>
        dataSource<span class="token punctuation">.</span>_primitives<span class="token punctuation">,</span>
        dataSource<span class="token punctuation">.</span>_groundPrimitives
      <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">LabelVisualizer_default</span><span class="token punctuation">(</span>entityCluster<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">ModelVisualizer_default</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Cesium3DTilesetVisualizer_default</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">PointVisualizer_default</span><span class="token punctuation">(</span>entityCluster<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">PathVisualizer_default</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">PolylineVisualizer_default</span><span class="token punctuation">(</span>
        scene<span class="token punctuation">,</span>
        entities<span class="token punctuation">,</span>
        dataSource<span class="token punctuation">.</span>_primitives<span class="token punctuation">,</span>
        dataSource<span class="token punctuation">.</span>_groundPrimitives
      <span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-2、entitycollection-与-visualizer-之间的通信-事件机制" tabindex="-1"><a class="header-anchor" href="#_5-2-2、entitycollection-与-visualizer-之间的通信-事件机制"><span>5.2.2、EntityCollection 与 Visualizer 之间的通信 - 事件机制</span></a></h5><blockquote><p>问题：可视化器如何将Entity转换为Primitive？</p></blockquote><p>实际上，每一个<strong>CustomDataSource</strong>都包含一个与之关联的<strong>EntityCollection</strong>，它让其包含的<strong>EntityCollection</strong>在<strong>DataSourceDisplay</strong>中作为一个合理的数据源存在。但是并不直接监听Entity的变化。</p><p>真正<strong>直接监听Entity变化</strong>的是通过<strong>EntityCollection</strong>的<strong>事件机制</strong>完成的，而<strong>EntityCollection</strong>无论发生什么变化都会传递给<strong>Visualizer</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>DataSourceDisplay
┖ CustomDataSource
  ┠ EntityCollection
  ┃      ↑
  ┃  事件机制监听变化
  ┃      ┃
  ┖ <span class="token punctuation">[</span>Visualizers<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>EntityCollection</strong> 原型链上的 <strong>add/removeById/removeAll</strong> 方法会执行一个模块内的函数 <code>fireChangedEvent()</code>，它最核心的作用，就是把增加、删除、修改的 <strong>Entity</strong> 通过事件触发通知给 <strong>Visualizer</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// function fireChangedEvent() 中</span>
<span class="token keyword">const</span> addedArray <span class="token operator">=</span> added<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> removedArray <span class="token operator">=</span> removed<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> changedArray <span class="token operator">=</span> changed<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

added<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
removed<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
changed<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
collection<span class="token punctuation">.</span>_collectionChanged<span class="token punctuation">.</span><span class="token function">raiseEvent</span><span class="token punctuation">(</span>
  collection<span class="token punctuation">,</span>
  addedArray<span class="token punctuation">,</span>
  removedArray<span class="token punctuation">,</span>
  changedArray
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<strong>added/removed/changed</strong> 是 <strong>Entity</strong> 增删改时的临时保存容器，每次执行 <code>fireChangedEvent()</code> 函数时都会把这三个容器清除。</p><p>在上述代码中，触发事件的还是<strong>EntityCollection</strong>本身，<code>fireChangedEvent()</code>只是把变动的、最新的Entity取出并通知注册的回调函数。</p><p>在<strong>VIsualizer</strong>创建的时候，就给<strong>EntityCollection</strong>注册了回调函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在 GeometryVisualizer 的构造函数中</span>
entityCollection<span class="token punctuation">.</span>collectionChanged<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token class-name">GeometryVisualizer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_onCollectionChanged<span class="token punctuation">,</span>
  <span class="token keyword">this</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，每当 <strong>EntityCollection</strong> 有增删改变化时，<strong>GeometryVisualizer</strong> 的 <code>_onCollectionChanged</code> 就会收到变化的 <strong>Entity</strong>，并继续执行后续动作。</p><p>关于<strong>Entity</strong>的属性的修改是借助<strong>Property API</strong>完成的，<strong>Property API</strong>是用于<strong>管理实体（Entity）属性的一组接口和方法</strong>。实体的属性可以是固定值、时间相关值或动态计算的值，Property API使得实体属性的处理更加灵活和强大。在<strong>add/removeAll/removeById</strong>到<strong>EntityCollection</strong>时，<strong>EntityCollection</strong>会为该<strong>Entity</strong>注册属性变动事件的回调：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//add</span>
<span class="token class-name">EntityCollection</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">entity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//...</span>
    entity<span class="token punctuation">.</span>definitionChanged<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
      <span class="token class-name">EntityCollection</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_onEntityDefinitionChanged<span class="token punctuation">,</span>
      <span class="token keyword">this</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fireChangedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>
    <span class="token keyword">return</span> entity<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//removeById</span>
<span class="token class-name">EntityCollection</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">removeById</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//...</span>
    entity<span class="token punctuation">.</span>definitionChanged<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>
      <span class="token class-name">EntityCollection</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_onEntityDefinitionChanged<span class="token punctuation">,</span>
      <span class="token keyword">this</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fireChangedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//removeAll</span>
<span class="token class-name">EntityCollection</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">removeAll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//...</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> entitiesLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token comment">//...</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">defined_default</span><span class="token punctuation">(</span>addedItem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        existingItem<span class="token punctuation">.</span>definitionChanged<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>
          <span class="token class-name">EntityCollection</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_onEntityDefinitionChanged<span class="token punctuation">,</span>
          <span class="token keyword">this</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        removed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>existingItemId<span class="token punctuation">,</span> existingItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	<span class="token comment">//...</span>
    <span class="token function">fireChangedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token class-name">EntityCollection</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_onEntityDefinitionChanged</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">entity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> entity<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_addedEntities<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_changedEntities<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fireChangedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_onEntityDefinitionChanged</code> 在 <strong>Entity</strong> 的 <code>definitionChanged</code> 事件触发后执行，也还是执行 <code>fireChangedEvent</code> 函数</p><h4 id="_5-3、时钟clock" tabindex="-1"><a class="header-anchor" href="#_5-3、时钟clock"><span>5.3、时钟Clock</span></a></h4><blockquote><p>问题：怎么触发DataSourceDisplay的更新？</p></blockquote><p><strong>CesiumWidget</strong>中拥有一个时钟成员对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// CesiumWidget 构造函数中</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>_clock <span class="token operator">=</span> <span class="token function">defined</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>clock<span class="token punctuation">)</span> <span class="token operator">?</span> options<span class="token punctuation">.</span>clock <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的时钟会在<strong>每一帧</strong>渲染调度函数中<strong>跳动</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">CesiumWidget</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_canRender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_scene<span class="token punctuation">.</span><span class="token function">initializeFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> currentTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_clock<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_clock<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但无论是否渲染，都会调用<code>Clock.prototype.tick()</code>方法跳动一次时钟，这个方法会触发<strong>onTick</strong>事件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Clock</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">tick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>onTick<span class="token punctuation">.</span><span class="token function">raiseEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在<strong>Viewer</strong>的构造函数中，先创建了<strong>CesiumWidget</strong>，随后就为时钟注册了<strong>onTick</strong>的回调函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Viewer</span><span class="token punctuation">(</span><span class="token parameter">container<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// eventHelper 是一个事件助手对象，此处为 clock 注册事件用</span>
  eventHelper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clock<span class="token punctuation">.</span>onTick<span class="token punctuation">,</span> <span class="token class-name">Viewer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_onTick<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token class-name">Viewer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_onTick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">clock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> time <span class="token operator">=</span> clock<span class="token punctuation">.</span>currentTime<span class="token punctuation">;</span>

  <span class="token keyword">const</span> isUpdated <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_dataSourceDisplay<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <strong>_onTick</strong> 方法中，第一件做的事情就是执行 <strong>DataSourceDisplay</strong> 的更新：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">DataSourceDisplay</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  
  <span class="token keyword">let</span> visualizers<span class="token punctuation">;</span>
  <span class="token keyword">let</span> vLength<span class="token punctuation">;</span>
  
  visualizers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_defaultDataSource<span class="token punctuation">.</span>_visualizers<span class="token punctuation">;</span>
  vLength <span class="token operator">=</span> visualizers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> vLength<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> visualizers<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个更新方法其实就是 <strong>进一步更新</strong> <strong>DataSourceDisplay</strong> 中所有的数据源（无论是数据源容器中的还是默认的 <strong>CustomDataSource</strong> 的）的 <strong>可视化器（Visualizer）</strong>。</p><p><strong>CesiumWidget</strong> 负责调度 <strong>Scene</strong> 的帧渲染，同时会跳动时钟对象，时钟对象的跳动又进而通知 <strong>Viewer</strong> 更新 <strong>DataSourceDisplay</strong> 下辖的所有 <strong>DataSource</strong>。</p><h4 id="_5-4、-visualizer-的更新" tabindex="-1"><a class="header-anchor" href="#_5-4、-visualizer-的更新"><span>5.4、 Visualizer 的更新</span></a></h4><h5 id="_5-4-1、更新方法中的三个循环" tabindex="-1"><a class="header-anchor" href="#_5-4-1、更新方法中的三个循环"><span>5.4.1、更新方法中的三个循环</span></a></h5><blockquote><p>三个循环把<code>_addedObjects/_removedObjects/_changedObjects</code>这三类逆序遍历通过EntityCollection的事件机制传递给Visualizer</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">GeometryVisualizer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> addedObjects <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_addedObjects<span class="token punctuation">;</span>
  <span class="token keyword">const</span> added <span class="token operator">=</span> addedObjects<span class="token punctuation">.</span>values<span class="token punctuation">;</span>
  <span class="token keyword">const</span> removedObjects <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_removedObjects<span class="token punctuation">;</span>
  <span class="token keyword">const</span> removed <span class="token operator">=</span> removedObjects<span class="token punctuation">.</span>values<span class="token punctuation">;</span>
  <span class="token keyword">const</span> changedObjects <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_changedObjects<span class="token punctuation">;</span>
  <span class="token keyword">const</span> changed <span class="token operator">=</span> changedObjects<span class="token punctuation">.</span>values<span class="token punctuation">;</span>
  
  <span class="token keyword">let</span> i<span class="token punctuation">;</span>
  <span class="token keyword">let</span> entity<span class="token punctuation">;</span>
  <span class="token keyword">let</span> id<span class="token punctuation">;</span>
  <span class="token keyword">let</span> updaterSet<span class="token punctuation">;</span>
  <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> changed<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> removed<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> added<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
  
  addedObjects<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  removedObjects<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  changedObjects<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新方法会取三类<strong>Entity</strong>（<code>_addedObjects/_removedObjects/_changedObjects</code>）进行逆序遍历。这三个容器会通过EntityCollection的事件机制传递给Visualizer。</p><h5 id="_5-4-2、visualizer-的数据转换工具-updater" tabindex="-1"><a class="header-anchor" href="#_5-4-2、visualizer-的数据转换工具-updater"><span>5.4.2、Visualizer 的数据转换工具 - Updater</span></a></h5><blockquote><p>Updater是什么?</p></blockquote><p>在使用Property API去修改实体Entity的属性（外观、形状...）时，这些动态值每一帧需要变成静态值传递给WebGL，Entity中的几何类型比较多，Cesium分别为这些几何类型的动态转静态的过程进行了封装——Updater：用于辅助几何类型的Entity的几何数据更新。</p><p>例如，在GeometryVisualizer.js模块中，有如下数组：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> geometryUpdaters <span class="token operator">=</span> <span class="token punctuation">[</span>
  BoxGeometryUpdater<span class="token punctuation">,</span>
  CylinderGeometryUpdater<span class="token punctuation">,</span>
  CorridorGeometryUpdater<span class="token punctuation">,</span>
  EllipseGeometryUpdater<span class="token punctuation">,</span>
  EllipsoidGeometryUpdater<span class="token punctuation">,</span>
  PlaneGeometryUpdater<span class="token punctuation">,</span>
  PolygonGeometryUpdater<span class="token punctuation">,</span>
  PolylineVolumeGeometryUpdater<span class="token punctuation">,</span>
  RectangleGeometryUpdater<span class="token punctuation">,</span>
  WallGeometryUpdater<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些就是对应的几何更新器。这些几何更新器类中可以找到createXXXGeometryInstance原型链上的方法。例如：<code>EllipsoidGeometryUpdater.prototype.createFillGeometryInstance</code> 方法。</p><figure><img src="`+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些方法就是最后创建 <code>Primitive</code> 时所需的 <code>GeometryInstance</code> 的创建者，它们依赖于时间，返回该时间的静态几何值。</p><h5 id="_5-4-3、updater-的集合-geometryupdaterset" tabindex="-1"><a class="header-anchor" href="#_5-4-3、updater-的集合-geometryupdaterset"><span>5.4.3、Updater 的集合 - GeometryUpdaterSet</span></a></h5><blockquote><p>GeometryUpdater是什么？</p></blockquote><p>在GeometryVisualizer.prototype.update方法中，三个逆序循环在访问一个GeometryUpdaterSet类型的容器。这个容器是<code>GeometryVisualizer.js</code> 模块内的私有类。</p><p>只有在遍历 <code>_addedObjects</code> 时才会创建 <code>GeometryUpdaterSet</code>，此时新来的 <code>Entity</code> 会传给这个集合。这个集合的作用也比较简单</p><ul><li>为新来 <strong>Entity</strong> 创建<strong>所有的</strong>几何更新器（这就是性能可能会出现问题的原因之一了）</li><li>为所有的几何更新器注册 <code>geometryChanged</code> 事件的响应函数</li></ul><p>这个几何更新器集合创建完后，会存储到 <strong>GeometryVisualizer</strong> 中，并与 <strong>Entity</strong> 的 <strong>id</strong> 作绑定（方便其它两个逆序循环查找）</p><figure><img src="'+j+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_5-4-4、性能的提升-updater-的分批" tabindex="-1"><a class="header-anchor" href="#_5-4-4、性能的提升-updater-的分批"><span>5.4.4、性能的提升 - Updater 的分批</span></a></h5><blockquote><p>分批的作用？分批的后续操作？</p></blockquote><p>WebGL 的特点就是，单帧内绘制的次数越少，就越流畅。<strong>GeometryVisualizer</strong> 如果不为这些接受来的 <strong>Entity</strong> 分类归并批次，而是粗暴地把每个 <strong>Entity</strong> 直接生成静态几何、外观数据就创建 <strong>Primitive</strong> 的话，有多少 <strong>Entity</strong> 就会有多少 <strong>Primitive</strong>，也就有多少 <strong>DrawCommand</strong>，性能会非常糟糕。</p><p>所以，Cesium在<strong>GeometryVisualizer</strong> 中设计了一个分批的过程，也就是原型链上的 <code>_insertUpdaterIntoBatch</code> 方法。</p><p>在 <strong>GeometryVisualizer</strong> 更新时，三个列表循环中的两个（添加列表和更改列表）都会调用 <code>_insertUpdaterIntoBatch</code> 方法，把由于新增或修改 <strong>Entity</strong> 而创建出来的新的 Updater 做分批。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">GeometryVisualizer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> changed<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    that<span class="token punctuation">.</span><span class="token function">_insertUpdaterIntoBatch</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> updater<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// ...</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> added<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    that<span class="token punctuation">.</span><span class="token function">_insertUpdaterIntoBatch</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> updater<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 <code>_insertUpdaterIntoBatch</code> 方法中，能看到非常多的分支判断以及 <strong>add</strong> 操作，这就是将 <strong>Updater</strong> 根据<strong>不同的条件</strong>分配到 <strong>Visualizer</strong> 上不同的<strong>批次容器</strong>中的过程了。</p><figure><img src="`+D+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_5-4-5、visualizer-更新的最后一步-批次容器更新" tabindex="-1"><a class="header-anchor" href="#_5-4-5、visualizer-更新的最后一步-批次容器更新"><span>5.4.5、Visualizer 更新的最后一步 - 批次容器更新</span></a></h5><blockquote><p>批次容器是什么？</p></blockquote><h4 id="_5-5、批次容器完成数据合并-primitive-创建" tabindex="-1"><a class="header-anchor" href="#_5-5、批次容器完成数据合并-primitive-创建"><span>5.5、批次容器完成数据合并 - Primitive 创建</span></a></h4><h5 id="_5-5-1、批次容器的类型与创建" tabindex="-1"><a class="header-anchor" href="#_5-5-1、批次容器的类型与创建"><span>5.5.1、批次容器的类型与创建</span></a></h5><p>CesiumJS 目前版本提供了若干种批次容器：</p><ul><li><code>DynamicGeometryBatch</code>：_dynamicBatch</li><li><code>StaticOutlineGeometryBatch</code>：_outlineBatches</li><li><code>StaticGroundGeometryColorBatch</code>：_groundColorBatches</li><li><code>StaticGroundGeometryPerMaterialBatch</code>：_groundMaterialBatches</li><li><code>StaticGeometryColorBatch</code>：_closedColorBatches、_openColorBatches</li><li><code>StaticGeometryPerMaterialBatch</code>：_closedMaterialBatches、_openMaterialBatches</li></ul><p>上面列出的，前者是类型，冒号后面的是 Visualizer 的成员字段（也就是具体批次容器对象），从名称不难看出它们的不同之处，大部分是用材质或颜色来作为分类依据。</p><p>在 <strong>GeometryVisualizer</strong> 的构造函数中找到创建这些成员字段的代码（其实构造函数里大部分代码也是在创建批次容器）。它们最终会合并到 <strong>_batches</strong> 数组中方便遍历：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>_batches <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_outlineBatches<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_closedColorBatches<span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_closedMaterialBatches<span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_openColorBatches<span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_openMaterialBatches<span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_groundColorBatches<span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_groundMaterialBatches<span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_dynamicBatch
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-5-2、-内部批次容器" tabindex="-1"><a class="header-anchor" href="#_5-5-2、-内部批次容器"><span>5.5.2、 内部批次容器</span></a></h5><blockquote><p>内部批次容器是什么？</p></blockquote><p>在上述列举的批次容器，只是一个代理容器，真正起到存储作用的是这些批次容器模块文件内部的Batch类。</p><p>以最简单的静态批次容器 <strong>StaticGeometryColorBatch</strong> 为例，它在 <strong>Updater</strong> 通过 <strong>add</strong> 方法添加进来时，就会创建内部 <strong>Batch</strong>，同时创建这个时刻的 <strong>GeometryInstance</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Batch</span><span class="token punctuation">(</span>
  <span class="token parameter">primitives<span class="token punctuation">,</span>
  translucent<span class="token punctuation">,</span>
  appearanceType<span class="token punctuation">,</span>
  depthFailAppearanceType<span class="token punctuation">,</span>
  depthFailMaterialProperty<span class="token punctuation">,</span>
  closed<span class="token punctuation">,</span>
  shadows</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token class-name">StaticGeometryColorBatch</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> updater</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> updater<span class="token punctuation">.</span><span class="token function">createFillGeometryInstance</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
  
  <span class="token keyword">const</span> batch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Batch</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  batch<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updater<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
  items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个内部 <strong>Batch</strong> 存放着外观信息和 <strong>GeometryInstance</strong> 对象。</p><figure><img src="`+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_5-5-3、创建-primitive" tabindex="-1"><a class="header-anchor" href="#_5-5-3、创建-primitive"><span>5.5.3、创建 Primitive</span></a></h5><p>在 Visualizer 的更新方法中，最后就是对所有批次容器进行更新。仍以 <strong>StaticGeometryColorBatch</strong> 为例，它的更新方法会调用一个模块内的 <code>updateItems</code> 函数，这个函数对传入的某部分内部 <strong>Batch</strong> 执行更新：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// StaticGeometryColorBatch.js 中</span>

<span class="token keyword">function</span> <span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token parameter">batch<span class="token punctuation">,</span> items<span class="token punctuation">,</span> time<span class="token punctuation">,</span> isUpdated</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isUpdated <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isUpdated<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token class-name">StaticGeometryColorBatch</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>solidsMoved <span class="token operator">||</span> translucentsMoved<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isUpdated <span class="token operator">=</span>
      <span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_solidItems<span class="token punctuation">,</span> time<span class="token punctuation">,</span> isUpdated<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isUpdated<span class="token punctuation">;</span>
    isUpdated <span class="token operator">=</span>
      <span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_translucentItems<span class="token punctuation">,</span> time<span class="token punctuation">,</span> isUpdated<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isUpdated<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>StaticGeometryColorBatch</strong> 上的 <code>_solidItems</code> 和 <code>_translucentItems</code> 都是普通的数组，保存的是模块内部定义 <strong>Batch</strong> 类型的对象。</p><p>而这些内部 <strong>Batch</strong> 的更新函数，最终就会根据存储的信息，完成 <strong>Primitive</strong> 的创建：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// StaticGeometryColorBatch.js 中</span>

<span class="token comment">// ... 这个方法很长，节约篇幅</span>
<span class="token class-name">Batch</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> isUpdated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> removedCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> primitive <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>primitive<span class="token punctuation">;</span>
  <span class="token keyword">const</span> primitives <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>primitives<span class="token punctuation">;</span>
  <span class="token keyword">let</span> i<span class="token punctuation">;</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>createPrimitive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> geometries <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>values<span class="token punctuation">;</span>
    <span class="token keyword">const</span> geometriesLength <span class="token operator">=</span> geometries<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>geometriesLength <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
      primitive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Primitive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      primitives<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>primitive<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token comment">// else ...</span>
  <span class="token punctuation">}</span> <span class="token comment">// else ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，<strong>Entity</strong> 终于完成了静态 <strong>Primitive</strong> 的创建，接着等待 <strong>Scene</strong> 在帧渲染流程中更新 <strong>PrimitiveCollection</strong> 进而创建出 <strong>DrawCommand</strong>，等待 <strong>WebGL</strong> 绘制。</p><h4 id="_5-6、总结" tabindex="-1"><a class="header-anchor" href="#_5-6、总结"><span>5.6、总结</span></a></h4><blockquote><p>关于CesiumWidget调度渲染、primitive渲染、Entity渲染解析、API关系架构</p></blockquote><p>![](./img/Cesium 渲染解析.jpg)</p>`,232);function I(L,B){const a=o("ExternalLinkIcon");return c(),i("div",null,[P,n("p",null,[n("a",V,[t("Releases · CesiumGS/cesium (github.com)"),e(a)])]),A,n("p",null,[n("a",R,[t("CesiumWidget模块的实例化过程 ver1.67 - 知乎 (zhihu.com)"),e(a)])]),z])}const O=p(E,[["render",I],["__file","11、Cesium进阶一：源码解析.html.vue"]]),q=JSON.parse('{"path":"/studyNotes/Cesium%E7%AC%94%E8%AE%B0/11%E3%80%81Cesium%E8%BF%9B%E9%98%B6%E4%B8%80%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","title":"11、Cesium源码","lang":"zh-CN","frontmatter":{"description":"11、Cesium源码 1、Viewer模块实例化过程 1.1、获取源码 github下载 Releases · CesiumGS/cesium (github.com) 编辑器打开 1.2、Viewer的构造函数 这一步，查看DOM元素是否存在，使用getElement_default模块判断domID或DOM元素变量并返回。 1.2.1、工具模块：...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/studyNotes/Cesium%E7%AC%94%E8%AE%B0/11%E3%80%81Cesium%E8%BF%9B%E9%98%B6%E4%B8%80%EF%BC%9A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"歪脖祭司"}],["meta",{"property":"og:title","content":"11、Cesium源码"}],["meta",{"property":"og:description","content":"11、Cesium源码 1、Viewer模块实例化过程 1.1、获取源码 github下载 Releases · CesiumGS/cesium (github.com) 编辑器打开 1.2、Viewer的构造函数 这一步，查看DOM元素是否存在，使用getElement_default模块判断domID或DOM元素变量并返回。 1.2.1、工具模块：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T11:02:41.000Z"}],["meta",{"property":"article:author","content":"祭司唐"}],["meta",{"property":"article:modified_time","content":"2024-03-23T11:02:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11、Cesium源码\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-23T11:02:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"祭司唐\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":3,"title":"1、Viewer模块实例化过程","slug":"_1、viewer模块实例化过程","link":"#_1、viewer模块实例化过程","children":[]},{"level":3,"title":"2、CesiumWidget模块实例化过程","slug":"_2、cesiumwidget模块实例化过程","link":"#_2、cesiumwidget模块实例化过程","children":[]},{"level":3,"title":"3、requestAnimationFrame循环触发帧动画","slug":"_3、requestanimationframe循环触发帧动画","link":"#_3、requestanimationframe循环触发帧动画","children":[]},{"level":3,"title":"4、渲染原理之渲染Primitive","slug":"_4、渲染原理之渲染primitive","link":"#_4、渲染原理之渲染primitive","children":[]},{"level":3,"title":"5、渲染原理之渲染Entity","slug":"_5、渲染原理之渲染entity","link":"#_5、渲染原理之渲染entity","children":[]}],"git":{"createdTime":1711191761000,"updatedTime":1711191761000,"contributors":[{"name":"tangwenjian","email":"gistwj@163.com","commits":1}]},"readingTime":{"minutes":31.13,"words":9340},"filePathRelative":"studyNotes/Cesium笔记/11、Cesium进阶一：源码解析.md","localizedDate":"2024年3月23日","excerpt":"\\n<h3>1、Viewer模块实例化过程</h3>\\n<h4>1.1、获取源码</h4>\\n<ul>\\n<li>github下载</li>\\n</ul>\\n<p><a href=\\"https://github.com/CesiumGS/cesium/releases\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Releases · CesiumGS/cesium (github.com)</a></p>\\n<figure><figcaption></figcaption></figure>\\n<ul>\\n<li>编辑器打开</li>\\n</ul>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}');export{O as comp,q as data};
